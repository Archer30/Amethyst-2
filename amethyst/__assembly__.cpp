#include "majaczek.h"

replace_byte asm_patched[] = {
	{ 0x71a734,0x90 },
	{ 0x71a735,0x90 },
	{ 0x71a736,0x90 },
	{ 0x71a737,0x90 },
	{ 0x71a738,0x90 },
	{ 0x71a739,0x90 },
	{ 0x71a73a,0x90 },
	{ 0x71a73b,0x90 },
	{ 0x71a73c,0x90 },
	{ 0x71a73d,0x90 },
	{ 0x71a73e,0x90 },
	{ 0x71a73f,0x90 },
	{ 0x71a740,0x90 },
	{ 0x71a741,0x90 },
	{ 0x71a742,0x90 },
	{ 0x71a743,0x90 },
	{ 0x71a744,0x90 },
	{ 0x71a745,0x90 },
	{ 0x71a746,0x90 },
	{ 0x71a747,0x90 },
	{ 0x71a748,0x90 },
	{ 0x71a749,0x90 },
	{ 0x71a74a,0x90 },
	{ 0x71a74b,0x90 },
	{ 0x71a74c,0x90 },
	{ 0x71a74d,0x90 },
	{ 0x71a74e,0x90 },
	{ 0x71a74f,0x90 },
	{ 0x71a750,0x90 },
	{ 0x71a751,0x90 },
	{ 0x71a752,0x90 },
	{ 0x71a753,0x90 },
	{ 0x71a754,0x90 },
	{ 0x71a755,0x90 },
	{ 0x71a756,0x90 },
	{ 0x71a757,0x90 },
	{ 0x71a758,0x90 },


	{ 0x71ad43,0x90 },
	{ 0x71ad44,0x90 },
	{ 0x71ad45,0x90 },
	{ 0x71ad46,0x90 },
	{ 0x71ad47,0x90 },
	{ 0x71ad48,0x90 },
	{ 0x71ad49,0x90 },
	{ 0x71ad4a,0x90 },
	{ 0x71ad4b,0x90 },
	{ 0x71ad4c,0x90 },
	{ 0x71ad4d,0x90 },
	{ 0x71ad4e,0x90 },
	{ 0x71ad4f,0x90 },
	{ 0x71ad50,0x90 },
	{ 0x71ad51,0x90 },
	{ 0x71ad52,0x90 },
	{ 0x71ad53,0x90 },
	{ 0x71ad54,0x90 },
	{ 0x71ad55,0x90 },
	{ 0x71ad56,0x90 },
	{ 0x71ad57,0x90 },
	{ 0x71ad58,0x90 },
	{ 0x71ad59,0x90 },
	{ 0x71ad5a,0x90 },
	{ 0x71ad5b,0x90 },
	{ 0x71ad5c,0x90 },
	{ 0x71ad5d,0x90 },
	{ 0x71ad5e,0x90 },
	{ 0x71ad5f,0x90 },
	{ 0x71ad60,0x90 },
	{ 0x71ad61,0x90 },
	{ 0x71ad62,0x90 },
	{ 0x71ad63,0x90 },
	{ 0x71ad64,0x90 },
	{ 0x71ad65,0x90 },
	{ 0x71ad66,0x90 },
	{ 0x71ad67,0x90 },
	{ 0x71ad68,0x90 },
	{ 0x71ad69,0x90 },
	{ 0x71ad6a,0x90 },
	{ 0x71ad6b,0x90 },
	{ 0x71ad6c,0x90 },
	{ 0x71ad6d,0x90 },
	{ 0x71ad6e,0x90 },
	{ 0x71ad6f,0x90 },
	{ 0x71ad70,0x90 },
	{ 0x71ad71,0x90 },
	{ 0x71ad72,0x90 },
	{ 0x71ad73,0x90 },
	{ 0x71ad74,0x90 },
	{ 0x71ad75,0x90 },
	{ 0x71ad76,0x90 },
	{ 0x71ad77,0x90 },
	{ 0x71ad78,0x90 },
	{ 0x71ad79,0x90 },
	{ 0x71ad7a,0x90 },

	{0x0,0x0}
};
replace_byte asm_not_patched[127];

void asm_store(void) {
	int i = 0;
	do {
		asm_not_patched[i].address = asm_patched[i].address;
		asm_not_patched[i].new_byte = *(unsigned char*)asm_not_patched[i].address;
		i++;
	} while (asm_patched[i].address);
	asm_not_patched[i] = { 0x0,0x0 };
}

void asm_write(void) {
	int i = 0;
	do {
		*(unsigned char*)asm_patched[i].address = asm_patched[i].new_byte;
		i++;
	} while (asm_patched[i].address);
}


void asm_restore(void) {
	int i = 0;
	do {
		*(unsigned char*)asm_not_patched[i].address = asm_not_patched[i].new_byte;
		i++;
	} while (asm_not_patched[i].address);
}